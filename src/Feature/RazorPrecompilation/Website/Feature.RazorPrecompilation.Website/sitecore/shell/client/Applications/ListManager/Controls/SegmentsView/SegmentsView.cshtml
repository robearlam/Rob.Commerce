@using Sitecore
@using Sitecore.Mvc
@using Sitecore.Text
@using Sitecore.Web
@using Sitecore.Web.UI.Controls.Common.UserControls
@using Texts = Sitecore.ListManagement.Client.Texts
@using UserControl = Sitecore.Web.UI.Controls.Common.UserControls.UserControl
@model Sitecore.Mvc.Presentation.RenderingModel
@{
    var resolver = Html.Sitecore().Controls().GetParametersResolver(Model.Rendering);
    var rendering = new UserControl(resolver)
    {
        Class = "sc-SegmentsView"
    };
    rendering.SetAttribute("data-sc-renderrule-url", resolver.GetString("RenderRuleUrl"));
    rendering.Requires.Script("listmanager", "segmentsView.js");
    rendering.Requires.Css("listmanager", "SegmentsView.css");

    var controlId = rendering.ControlId;
    var htmlAttributes = rendering.HtmlAttributes;
}
<script data-layout-segment-view="@controlId" type="text/x-sc-importMapTo">
    <div class="sc-accordion sc-advancedExpander">
        <div class="sc-accordion-header sc-advancedExpander-header">
            <table>
                <tr>
                    <td class="sc-accordion-header-title sc-advancedExpander-header-title">
                        <div class="sc-accordion-header-cell sc-advancedExpander-header-cell">
                            <span class="sc-segment-name">@ClientHost.Globalization.Translate(Texts.Segment) <%= index%> - <%= isRemoved ? '@ClientHost.Globalization.Translate(Texts.NotFound)' : name %></span>
                        </div>
                    </td>
                    <td class="sc-accordion-header-actionbar sc-advancedExpander-header-actionbar">&nbsp;</td>
                    <td class="sc-accordion-header-chevron sc-advancedExpander-header-chevron">&nbsp;</td>
                    <td class="sc-accordion-header-chevron sc-advancedExpander-header-chevron">
                        <a href="#" class="sc-accordion-chevron-link sc-advancedExpander-chevron-link">
                            <span class="sc-accordion-header-chevron-glyph sc-accordion2-header-chevron-glyph-open sc-advancedExpander-header-chevron-glyph sc-advancedExpander2-header-chevron-glyph-open"></span>
                        </a>
                    </td>
                <tr>
                <tr>
                    <td class="sc-accordion-header-promotedfields sc-advancedExpander-header-promotedfields" colspan="4"></td>
                </tr>
            </table>
        </div>
        <div class="sc-accordion-body sc-advancedExpander-body" data-bind="visible: isOpen">
            <div class="sc-advancedExpander-bodywrapper">
                <div class="row show-padding">
                    <div class="col-md-12 pull-left sc-segmentview-conditioncontent-left-field">
                        <div class="col-md-9">
                            <div class="sc-conditions">
                                <%if(isRemoved){%>                                
                                   <div class="sc-empty-rules">
                                       @ClientHost.Globalization.Translate(Texts.SegmentReferenceHasBeenRemovedOrDeleted)
                                   </div>
                                <% } else { %>
                                    <%= rules %>
                                <% }%>
                            </div>
                        </div>
                        <div class="col-md-3 sc-align-right">
                            <button type="button"
                                    class="btn sc-btn btn-default sc-segmentbtn sc-listmanagement-remove-condition"
                                    title='@ClientHost.Globalization.Translate(Texts.RemoveThisSegment)'>
                                @ClientHost.Globalization.Translate(Texts.RemoveSegment)
                            </button>
                            <button type="button" <%= isRemoved ? 'disabled="disabled"' : '' %>
                                    class="btn sc-btn btn-default sc-segmentbtn sc-listmanagement-edit-rules"
                                    title="@ClientHost.Globalization.Translate(Texts.EditThisSegment)">
                                @ClientHost.Globalization.Translate(Texts.EditSegment)
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<div @htmlAttributes>
    
</div>