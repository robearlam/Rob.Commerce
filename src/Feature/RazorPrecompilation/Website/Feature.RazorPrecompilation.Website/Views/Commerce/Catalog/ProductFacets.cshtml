@using Sitecore.XA.Foundation.MarkupDecorator.Extensions
@using Sitecore.XA.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Commerce.XA.Feature.Catalog.Extensions
@using Sitecore.Commerce.XA.Feature.Catalog.Models
@using Sitecore.Commerce.XA.Foundation.Common.ExtensionMethods

@model ProductFacetsRenderingModel
@{
    if (Model == null || Model.ChildProductFacets == null || !Model.ChildProductFacets.Any())
    {
        return;
    }

    if (!Sitecore.Context.PageMode.IsExperienceEditor)
    {
        var validFacetsCount = 0;

        foreach (var facet in Model.ChildProductFacets)
        {
            if (facet.IsValid())
            {
                validFacetsCount++;
            }
        }

        if (validFacetsCount == 0)
        {
            return;
        }
    }
}

<div @Html.Sxa().Component("cxa-productfacets-component", Model.Attributes) data-cxa-component-class="CatalogFacetComponent" data-cxa-component-initialized="false" data-cxa-component-type="form">
    @if (!String.IsNullOrWhiteSpace(Model.ErrorMessage))
    {
        <div class="error-message">
            @Model.ErrorMessage
        </div>
    }
    else
    {
        <div class="component-content">
            <div class="product-facets">
                @foreach (var facet in Model.ChildProductFacets)
                {
                    if (facet.IsValid())
                    {
                        <h4 class="facet-title">@facet.DisplayName.ToUpper()</h4>
                        <div class="@facet.DisplayName.ToLower().Replace(" ", "")-list">
                            <ul class="facet-@facet.DisplayName.ToLower()">
                                @foreach (var value in facet.FoundValues)
                                {
                                    bool addingFacet = true;
                                    var facetCount = value.AggregateCount;

                                    if (value.IsValid())
                                    {
                                        string name = value.Name;

                                        switch (name)
                                        {
                                            case "1":
                                            case "true":
                                                name = "Yes";
                                                break;
                                            case "0":
                                            case "false":
                                                name = "No";
                                                break;
                                        }

                                        var isActveFacet = string.Empty;
                                        foreach (var activeFacet in Model.ActiveFacets)
                                        {
                                            if (activeFacet.Values.Contains(value.Name))
                                            {
                                                isActveFacet = "class=active";
                                                addingFacet = false;
                                            }
                                        }

                                        int jsIsActive = addingFacet ? 1 : 0;

                                        <li @isActveFacet><a href="javascript:" data-onclick="FireFacetApplied('@facet.Name', '@value.Name', @jsIsActive, '@Url.AddToFacets(facet.Name, value.Name)')"><span class="facet-name">@name</span> <span class="facet-count">(@facetCount)</span></a></li>
                                    }
                                }
                            </ul>
                        </div>
                    }
                }
            </div>
        </div>

    }
</div>