

@using System.Web.Mvc.Html
@using Sitecore.Commerce.XA.Foundation.Common
@using Sitecore.Commerce.XA.Foundation.Common.ExtensionMethods
@using Sitecore.Mvc

@model Sitecore.Commerce.XA.Feature.Catalog.Models.CatalogItemRenderingModel
@{
    if (Model == null)
    {
        return;
    }

    bool isCategory = Model.IsCategory;
    var brand = @Model.RenderField("Brand");
    var brandLength = brand.ToString().Length;
}

<div class="product-summary">
    <div class="photo">
        @if (Model.CatalogItem != null)
        {
            using (Html.EditFrame(Model.CatalogItem.Paths.FullPath, Constants.ItemPaths.EditFrameImages))
            {
                if (Model.Images != null && Model.Images.Count > 0)
                {
                    <a href="@Model.Link">
                        <img src="@Model.Images[0].GetImageUrl(300, 300)" alt="product image" title="@Model.DisplayName" />
                    </a>
                }
                else
                {
                    <a href="@Model.Link">
                        @Html.Sitecore().Field("Image", Html.Sitecore().CurrentItem, new { Parameters = new Sitecore.Collections.SafeDictionary<string> { { "title", @Model.DisplayName } } })
                    </a>
                }
            }
        }
        else
        {
            if (Model.Images != null && Model.Images.Count > 0)
            {
                <a href="@Model.Link">
                    <img src="@Model.Images[0].GetImageUrl(263, 220)" alt="product image" title="@Model.DisplayName" />
                </a>
            }
            else
            {
                <a href="@Model.Link">
                    @Html.Sitecore().Field("Image", Html.Sitecore().CurrentItem, new { Parameters = new Sitecore.Collections.SafeDictionary<string> { { "title", @Model.DisplayName } } })
                </a>
            }
        }
    </div>
    <div class="product-info">
        <h4 class="product-title" title="@Model.DisplayName">
            <a href="@Model.Link">@Model.DisplayName</a>
        </h4>

        @if (@brand != null && @brandLength > 0)
        {
            <div class="product-brand">@brand</div>
        }
        else
        {
            <div class="product-brand">&nbsp;</div>
        }

        @if (!isCategory)
        {
            bool isVariant = Model.LowestPricedVariantAdjustedPrice.HasValue;
            bool isOnSale = false;
            string adjustedPriceWithCurrency = string.Empty;
            string listPriceWithCurrency = string.Empty;
            decimal savingsPercentage = 0.0M;
            decimal listPrice = 0.0M;
            decimal adjustedPrice = 0.0M;
            bool displayStartingFrom = false;

            if (isVariant && Model.LowestPricedVariantListPrice.HasValue)
            {
                adjustedPrice = Model.LowestPricedVariantAdjustedPrice.Value;
                listPrice = Model.LowestPricedVariantListPrice.Value;
                displayStartingFrom = (Model.HighestPricedVariantAdjustedPrice.HasValue && adjustedPrice < Model.HighestPricedVariantAdjustedPrice.Value);

                adjustedPriceWithCurrency = Model.LowestPricedVariantAdjustedPriceWithCurrency;
                isOnSale = (adjustedPrice < listPrice);
                if (isOnSale)
                {
                    listPriceWithCurrency = Model.LowestPricedVariantListPriceWithCurrency;
                    savingsPercentage = Model.VariantSavingsPercentage;
                }
                else
                {
                    listPriceWithCurrency = adjustedPriceWithCurrency;
                }
            }
            else
            {
                listPriceWithCurrency = Model.ListPriceWithCurrency;
                listPrice = (Model.ListPrice.HasValue) ? Model.ListPrice.Value : 0.0M;

                isOnSale = Model.IsOnSale;
                if (isOnSale)
                {
                    adjustedPriceWithCurrency = Model.AdjustedPriceWithCurrency;
                    savingsPercentage = Model.SavingsPercentage;
                }
            }
            <div class="lowest-variant-price">
                @if (displayStartingFrom)
                {
                @Html.Sitecore().Field("Price Starting From Text", Html.Sitecore().CurrentItem)
            
                }
            </div>




            if (isOnSale)
            {
                <div class="current-price on-sale">@Html.DisplayFor(model => adjustedPriceWithCurrency)</div>
                <div class="previous-price on-sale">@Html.DisplayFor(model => listPriceWithCurrency)</div>
                <div class="savings on-sale"><span class="savings-text">@Html.Sitecore().Field("Save Percent Lead", Html.Sitecore().CurrentItem)</span> <span class="savings-percentage">@savingsPercentage%</span></div>
            }
            else
            {
                <div class="current-price">@Html.DisplayFor(model => listPriceWithCurrency)</div>
                <div class="previous-price"></div>
                <div class="savings"></div>
                <div></div>
            }

            if (Model.StockStatus != null)
            {
                <div class="product-stock-status @Model.StockStatusName">@Html.DisplayFor(model => Model.StockStatusName)</div>
                if (Model.StockAvailabilityDate != null)
                {
                    <div class="product-stock-availability-date"> / @Html.DisplayFor(model => Model.StockAvailabilityDate)</div>
                }
                else
                {
                    <div class="product-stock-availability-date"></div>
                }
            }
            else
            {
                <div class="product-stock-status">&nbsp;</div>
                <div class="price-stock"></div>
            }
        }

        @if (!isCategory)
            {
            <div class="product-rating">
                <ul>
                    <li @(Model.CustomerAverageRating >= 1 ? "class=rated" : "")><span class="icon-star"></span></li>
                    <li @(Model.CustomerAverageRating >= 2 ? "class=rated" : "")><span class="icon-star"></span></li>
                    <li @(Model.CustomerAverageRating >= 3 ? "class=rated" : "")><span class="icon-star"></span></li>
                    <li @(Model.CustomerAverageRating >= 4 ? "class=rated" : "")><span class="icon-star"></span></li>
                    <li @(Model.CustomerAverageRating >= 5 ? "class=rated" : "")><span class="icon-star"></span></li>
                </ul>
            </div>
        }
        @if (!isCategory)
        {

            if (Model.IsOnSale)
            {
                <div class="product-category on-sale">
                    <a href="@Model.Link">
                        <span class="icon-list"></span> @Html.Sitecore().Field("Product Page Link Text", Html.Sitecore().CurrentItem)
                    </a>
                </div>
            }
            else
            {
                <div class="product-category">
                    <a href="@Model.Link">
                        <span class="icon-list"></span> @Html.Sitecore().Field("Product Page Link Text", Html.Sitecore().CurrentItem)
                    </a>
                </div>
            }


        }
        else
        {
            if (Model.IsOnSale)
            {
                <div class="product-category on-sale">
                    <a href="@Model.Link">
                        <span class="icon-list"></span> @Html.Sitecore().Field("Category", Html.Sitecore().CurrentItem)
                    </a>
                </div>

            }
            else
            {
                <div class="product-category">
                    <a href="@Model.Link">
                        <span class="icon-list"></span> @Html.Sitecore().Field("Category", Html.Sitecore().CurrentItem)
                    </a>
                </div>
            }

        }
    </div>
   
</div>