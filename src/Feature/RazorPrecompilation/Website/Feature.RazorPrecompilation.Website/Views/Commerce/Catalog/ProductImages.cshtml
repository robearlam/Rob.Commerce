
@using Sitecore.XA.Foundation.MarkupDecorator.Extensions
@using Sitecore.XA.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Commerce.XA.Foundation.Common
@using Sitecore.Commerce.XA.Foundation.Common.ExtensionMethods
@using Sitecore.Commerce.XA.Feature.Catalog.Models

@model CatalogItemRenderingModel

<div @Html.Sxa().Component("cxa-productimages-component", Model.Attributes)>
    @if (Model == null)
    {
        return;
    }

    @if (!String.IsNullOrWhiteSpace(Model.ErrorMessage))
    {
        <div class="error-message">
            @Model.ErrorMessage
        </div>
    }
    else
    {
        <div class="component-content">
            <div class="product-image">
                @if (Model.CatalogItem != null)
                {

                    using (Html.EditFrame(Model.CatalogItem.Paths.FullPath, Constants.ItemPaths.EditFrameImages))
                    {
                        if (Model.Images == null || !Model.Images.Any())
                        {
                            @Html.Sitecore().Field("Image", Html.Sitecore().CurrentItem, new { Parameters = new Sitecore.Collections.SafeDictionary<string> { } })
                        }
                        else
                        {
                            <img src="@Model.Images[0].GetImageUrl(770, 625)"  alt="a"  />
                        }
                    }
                }
                else
                {
                    if (Model.Images == null || !Model.Images.Any())
                    {
                        @Html.Sitecore().Field("Image", Html.Sitecore().CurrentItem, new { Parameters = new Sitecore.Collections.SafeDictionary<string> { } })
                    }
                    else
                    {
                        <img src="@Model.Images[0].GetImageUrl(770, 625)" alt="a" />
                    }
                }
            </div>
            <div class="product-images">
                @if (Model.Images != null && Model.Images.Any())
                {
                    <ul>
                        @foreach (var mediaItem in Model.Images)
                    {
                            <li><a href="@mediaItem.GetImageUrl(770, 625)"><img src="@mediaItem.GetImageUrl(80, 65)"  alt="a" /></a></li>
                        }
                    </ul>
                }
            </div>
        </div>
    }
</div>