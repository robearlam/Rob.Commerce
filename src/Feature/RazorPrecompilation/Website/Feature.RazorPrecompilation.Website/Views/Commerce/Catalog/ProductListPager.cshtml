@using Sitecore.XA.Foundation.MarkupDecorator.Extensions
@using Sitecore.XA.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Commerce.XA.Feature.Catalog.Extensions
@using Sitecore.Commerce.XA.Feature.Catalog.Models
@model ProductListPagerRenderingModel

@{
    if (Model == null || Model.Pagination == null || Model.Pagination.TotalResultCount == 0)
    {
        return;
    }
}
@{
    var currentItem = @Html.Sitecore().CurrentItem;
    int desiredPages = Model.PagesOnEachSideOfCurrentPage;

    var currentPageNumber = Model.Pagination.PageNumber;
    var totalPages = Model.Pagination.NumberOfPages;
    var isFirstPage = (currentPageNumber <= 0);
    var isLastPage = (currentPageNumber >= (totalPages - 1));

    var previousPageUrl = "javascript:";
    var nextPageUrl = "javascript:";

    if (!isFirstPage)
        previousPageUrl = Url.AddPageNumber(currentPageNumber - 1);

    if (!isLastPage)
        nextPageUrl = Url.AddPageNumber(currentPageNumber + 1);
}
<div @Html.Sxa().Component("cxa-productlistpager-component", Model.Attributes)>
    @if (!String.IsNullOrWhiteSpace(Model.ErrorMessage))
    {
        <div class="error-message">
            @Model.ErrorMessage
        </div>
    }
    else if (totalPages > 0)
    {
        <div  class="component-content">
            <div class="productlist-pagination-container">
                    <ul class="productlist-pagination">
                        <li @if (isFirstPage) { <text> class="disabled" </text>   }><a title="@currentItem["Previous Button Tooltip"]" href="@previousPageUrl">@Html.Sitecore().Field("Previous Button Title", currentItem)</a></li>

                        @if (totalPages <= (desiredPages * 2) + 1)
                        {
                            for (int i = 0; i < totalPages; i++)
                            {
                                <li @if (currentPageNumber == i)
                                { <text> class="active" </text>  }><a href="@Url.AddPageNumber(i)">@(i + 1)</a></li>
                            }
                        }
                        else
                        {
                            int leftoverEndPages = 0;
                            int leftoverStartPages = 0;

                            int remainingPages = (int)Math.Ceiling((double)(Model.Pagination.TotalResultCount - Model.Pagination.EndResultIndex) / Model.Pagination.PageResultCount);
                            int previousPages = Model.Pagination.StartResultIndex / Model.Pagination.PageResultCount;
                            int endPage = currentPageNumber + remainingPages;
                            int startPage = currentPageNumber - previousPages;

                            if (remainingPages < desiredPages) { leftoverEndPages = desiredPages - remainingPages; }
                            if (previousPages < desiredPages) { leftoverStartPages = desiredPages - previousPages; }

                            if (leftoverEndPages == 0 && leftoverStartPages == 0)
                            {
                                endPage = currentPageNumber + desiredPages;
                                startPage = currentPageNumber - desiredPages;
                            }
                            else if (leftoverEndPages > 0)
                            {
                                int startPages = desiredPages + leftoverEndPages;
                                if (previousPages > startPages) { startPage = currentPageNumber - startPages; }
                            }
                            else if (leftoverStartPages > 0)
                            {
                                int endPages = desiredPages + leftoverStartPages;
                                if (remainingPages > endPages) { endPage = currentPageNumber + endPages; }
                            }

                            if (startPage <= 0)
                            {
                                startPage = 0;
                            }

                            for (int i = startPage; i <= endPage; i++)
                            {
                                <li @if (currentPageNumber == i) { <text> class="active" </text>   }><a href="@Url.AddPageNumber(i)">@(i + 1)</a></li>
                            }
                        }

                        <li @if (isLastPage) { <text> class="disabled" </text>    }><a title="@currentItem["Next Button Tooltip"]" href="@nextPageUrl">@Html.Sitecore().Field("Next Button Title", currentItem)</a></li>
                    </ul>
                </div>
        </div>
    }
</div>